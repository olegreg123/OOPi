Index: src/ait/user/model/test/UserTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ait/user/model/test/UserTest.java b/src/ait/user/model/test/UserTest.java
new file mode 100644
--- /dev/null	(revision 4df438af05aaf7c9bbe6b746fe8b5ee48a1bc779)
+++ b/src/ait/user/model/test/UserTest.java	(revision 4df438af05aaf7c9bbe6b746fe8b5ee48a1bc779)
@@ -0,0 +1,93 @@
+package ait.user.model.test;
+import ait.user.model.User;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class UserTest {
+    private User user;
+    private String email = "markstevens@gmail.com";
+    private String password = "Uu12345!";
+
+    @BeforeEach
+    void setUp() {
+        user = new User(email, password);
+    }
+
+    @Test
+    void testValidEmail() {
+        String validEmail = "   markstevens@gmail.com ";
+        user.setEmail(validEmail.trim());
+        assertEquals(validEmail.trim(), user.getEmail());
+    }
+
+    @Test
+    void testEmailWithoutAt() {
+        String invalidEmail = "markstevens@gmail.com";
+        user.setEmail(invalidEmail);
+        assertEquals(email, user.getEmail());
+    }
+
+    @Test
+    void testEmailDoubleAt() {
+        String invalidEmail = "mark@stevens@gmail.com";
+        user.setEmail(invalidEmail);
+        assertEquals(email, user.getEmail());
+    }
+
+    @Test
+    void testEmailDotAfterAt() {
+        String invalidEmail = "markstevens@gmailcom";
+        user.setEmail(invalidEmail);
+        assertEquals(email, user.getEmail());
+    }
+
+    @Test
+    void testEmailLastDot() {
+        String invalidEmail = "markstevens@gmailcom.";
+        user.setEmail(invalidEmail);
+        assertEquals(email, user.getEmail());
+        invalidEmail = "john@gmxd.e";
+        user.setEmail(invalidEmail);
+        assertEquals(email, user.getEmail());
+    }
+
+    @Test
+    void testEmailIncorrectSymbol() {
+        String invalidEmail = "$markstevens@gmail.com";
+        user.setEmail(invalidEmail);
+        assertEquals(email, user.getEmail());
+    }
+
+    @Test
+    void testValidPassword() {
+        String validPassword = "U12345u!";
+        user.setPassword(validPassword);
+        assertEquals(validPassword, user.getPassword());
+    }
+
+    @Test
+    void testPasswordLength() {
+        String invalidPassword = "u12345!";
+        user.setPassword(invalidPassword);
+        assertEquals(password, user.getPassword());
+    }
+
+    @Test
+    void testPasswordUpperCase() {
+        String invalidPassword = "Uu!";
+        user.setPassword(invalidPassword);
+        assertEquals(password, user.getPassword());
+    }
+
+    @Test
+    void testPasswordLowerCase() {
+        String invalidPassword = "Uu12345";
+        user.setPassword(invalidPassword);
+        assertEquals(password, user.getPassword());
+    }
+
+}
Index: src/ait/user/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ait/user/model/User.java b/src/ait/user/model/User.java
new file mode 100644
--- /dev/null	(revision 4df438af05aaf7c9bbe6b746fe8b5ee48a1bc779)
+++ b/src/ait/user/model/User.java	(revision 4df438af05aaf7c9bbe6b746fe8b5ee48a1bc779)
@@ -0,0 +1,103 @@
+package ait.user.model;
+
+public class User {
+    private String email;
+    private String password;
+
+    public User(String email, String password) {
+        setEmail(email);
+        setPassword(password);
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        if (emailIsValid(email)) {
+            this.email = email;
+        } else {
+            System.out.println(email + " is not valid");
+        }
+
+    }
+
+    /*
+    1) '@' - exist and only one -> Done
+    2) '.' - min one dot after @ -> Done
+    3) min two symbols after last dot -> Done
+    4) alphabetic, digits, '@', '.', '_', '-' -> Done
+     */
+    private boolean emailIsValid(String email) {
+        int at = email.indexOf('@');
+        if (at == -1 || email.lastIndexOf('@') != at) {
+            return false;
+        }
+        if (email.indexOf('.', at + 1) == -1) {
+            return false;
+        }
+        if (email.lastIndexOf('.') >= email.length() - 2) {
+            return false;
+        }
+        for (int i = 0; i < email.length(); i++) {
+            char c = email.charAt(i);
+            if (!(Character.isDigit(c) || Character.isAlphabetic(c) || c == '@' || c == '.' || c == '_' || c == '-')) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    /*
+    TODO Homework
+    1) Min 8 symbols
+    2) Min one symbol in uppercase
+    3) Min one symbol in lowercase
+    4) Min one symbol is digit
+    5) Min one symbol is a special symbol (!%@*&)
+     */
+    public void setPassword(String password) {
+        if (passwordIsValid(password)) {
+            this.password = password;
+        } else {
+            System.out.println("password is not valid");
+        }
+    }
+
+    private boolean passwordIsValid(String password) {
+        boolean[] res = new boolean[5];
+        if (password.length() >= 8) {
+            res[0] = true;
+        }
+        for (int i = 0; i < password.length(); i++) {
+            char c = password.charAt(i);
+            if (Character.isUpperCase(c)) {
+                res[1] = true;
+            }
+            if (Character.isLowerCase(c)) {
+                res[2] = true;
+            }
+            if (Character.isDigit(c)) {
+                res[3] = true;
+            }
+
+            if ("!%@*&".indexOf(c) >= 0) {
+                res[4] = true;
+            }
+        }
+        return res[0] && res[1] && res[2] && res[3] && res[4];
+    }
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "email='" + email + '\'' +
+                ", password='" + password + '\'' +
+                '}';
+    }
+    }
+
Index: src/ait/user/model/UserAppl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ait/user/model/UserAppl.java b/src/ait/user/model/UserAppl.java
new file mode 100644
--- /dev/null	(revision 4df438af05aaf7c9bbe6b746fe8b5ee48a1bc779)
+++ b/src/ait/user/model/UserAppl.java	(revision 4df438af05aaf7c9bbe6b746fe8b5ee48a1bc779)
@@ -0,0 +1,14 @@
+package ait.user.model;
+
+public class UserAppl {
+    public static void main(String[] args) {
+        User user = new User ("markstevens@gmail.com", "Uu12345!");
+        System.out.println(user);
+        user.setEmail("markstevens@gmail..com");
+        System.out.println(user);
+        user.setPassword("Uu12345.!");
+        System.out.println(user.getPassword());
+    }
+
+    }
+
